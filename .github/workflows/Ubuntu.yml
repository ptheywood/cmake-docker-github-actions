# Compile project on Ubuntu
name: Ubuntu

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          - os: ubuntu-20.04
            gcc: 9
            cuda: 11.4
          - os: ubuntu-18.04
            gcc: 8
            cuda: 10.2
    env:
      build_dir: "build"
      config: "Release"
      build_tests: "ON"
      build_swig_python: "ON"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      if: ${{ startswith(matrix.os, 'ubuntu') }}
      shell: bash
      run: .github/scripts/install_cuda_ubuntu.sh
      env:
        cuda: ${{ matrix.cuda }}

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: install setuptools with an appropriate version
      run: |
        python3 -m pip install --upgrade wheel
        python3 -m pip install --upgrade 'setuptools; python_version >= "3.6"' 'setuptools<51.3.0; python_version < "3.6" and python_version >= "3.0"'

    - name: Install Python Venv
      run: sudo apt-get install python3-venv

    - name: Configure cmake
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} -DBUILD_TESTS=${{ env.build_tests }} -DCMAKE_WARN_DEPRECATED=OFF -DBUILD_SWIG_PYTHON=${{ env.build_swig_python }}

    - name: Build static library
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target cdga --verbose -j `nproc`

    - name: Build python wheel
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target pycdga --verbose -j `nproc`

    - name: Build tests
      working-directory: ${{ env.build_dir }}
      if: env.build_tests == 'ON'
      run: cmake --build . --target tests --verbose -j `nproc`

    # - name: Run the c++ tests
    #   working-directory: ${{ env.build_dir }}
    #   run: ./bin/${{ env.config }}/tests

    # - name: Run the python tests
    #   working-directory: ${{ env.build_dir }}
    #   run: |
    #     source ./lib/${{ env.config }}/python/venv/bin/activate
    #     python3 ../tests/swig/python/tests.py
