# Compile project on Ubuntu
name: Ubuntu

on:
  push:
    branches:
      - '**'
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          - os: ubuntu-20.04
            cuda: "11.4"
            cuda_arch: "52"
            gcc: 9
          - os: ubuntu-20.04
            cuda: "11.3"
            cuda_arch: "52"
            gcc: 9
          - os: ubuntu-20.04
            cuda: "11.2"
            cuda_arch: "52"
            gcc: 9
          - os: ubuntu-20.04
            cuda: "11.1"
            cuda_arch: "52"
            gcc: 9
          - os: ubuntu-20.04
            cuda: "11.0"
            cuda_arch: "52"
            gcc: 9
          - os: ubuntu-18.04
            cuda: "10.2"
            cuda_arch: "52"
            gcc: 8
          - os: ubuntu-18.04
            cuda: "10.1"
            cuda_arch: "52"
            gcc: 8
          - os: ubuntu-18.04
            cuda: "10.0"
            cuda_arch: "52"
            gcc: 8
    env:
      BUILD_DIR: "build"
      CONFIG: "Release"
      BUILD_TESTS: "ON"
      BUILD_SWIG_PYTHON: "ON"
      VISUALISATION: "OFF"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      if: ${{ startswith(matrix.os, 'ubuntu') }}
      shell: bash
      env:
        cuda: ${{ matrix.cuda }}
      run: .github/scripts/install_cuda_ubuntu.sh

    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: Install python dependencies
      if: ${{ env.BUILD_SWIG_PYTHON == 'ON' }}
      run: |
        sudo apt-get install python3-venv
        python3 -m pip install --upgrade wheel
        python3 -m pip install --upgrade 'setuptools; python_version >= "3.6"' 'setuptools<51.3.0; python_version < "3.6" and python_version >= "3.0"'

    - name: Configure cmake
      run: >
        cmake . -B ${{ env.BUILD_DIR }}
        -DCMAKE_BUILD_TYPE=${{ env.CONFIG }}
        -DCMAKE_WARN_DEPRECATED=OFF 
        -DCUDA_ARCH="${{ matrix.cuda_arch }} "
        -DBUILD_TESTS="${{ env.BUILD_TESTS }} "
        -DBUILD_SWIG_PYTHON="${{ env.BUILD_SWIG_PYTHON }}"

    - name: Build static library
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target cdga --verbose -j `nproc`

    - name: Build python wheel
      if: ${{ env.BUILD_SWIG_PYTHON == 'ON' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target pycdga --verbose -j `nproc`

    - name: Build tests
      if: ${{ env.BUILD_TESTS == 'ON' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target tests --verbose -j `nproc`

    - name: Build all remaining targets
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target all --verbose -j `nproc`
