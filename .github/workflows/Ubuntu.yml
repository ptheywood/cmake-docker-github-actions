# Compile project on Ubuntu
name: Ubuntu

on:
  push:
    branches:
      - '**'
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Ubuntu.yml"
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.cudacxx.os }}
    strategy:
      fail-fast: false
      # Multiplicative build matrix
      # optional exclude: can be partial, include: must be specific
      matrix:
        cudacxx:
          - cuda: "11.4"
            cuda_arch: "35"
            hostcxx: gcc-9
            os: ubuntu-20.04
          - cuda: "10.0"
            cuda_arch: "35"
            hostcxx: gcc-7
            os: ubuntu-18.04
        python: 
          # - "3.9"
          - "3.8"
          # - "3.7"
          # - "3.6"
        config:
          - name: "Release"
            config: "Release"
            SEATBELTS: "ON"
          # - name: "SEATBELTS=OFF"
          #   config: "Release"
          #   SEATBELTS: "OFF"
          # - name: "Debug"
          #   config: "Debug"
          #   SEATBELTS: "OFF"
        VISUALISATION: 
          - "ON"
          # - "OFF"

    # Name the job based on matrix/env options
    name: "build (${{ matrix.cudacxx.cuda }}, ${{matrix.python}}, ${{ matrix.VISUALISATION }}, ${{ matrix.config.name }}, ${{ matrix.cudacxx.os }})"

    # Define job-wide env constants, and promote matrix elements to env constants for portable steps.
    env:
      # Define constants
      BUILD_DIR: "build"
      BUILD_TESTS: "OFF"
      # Conditional based on matrix via awkward almost ternary
      BUILD_SWIG_PYTHON: ${{ fromJSON('{true:"ON",false:"OFF"}')[matrix.python != ''] }}
      # Port matrix options to environment, for more portability.
      CUDA: ${{ matrix.cudacxx.cuda }}
      CUDA_ARCH: ${{ matrix.cudacxx.cuda_arch }}
      HOSTCXX: ${{ matrix.cudacxx.hostcxx }}
      OS: ${{ matrix.cudacxx.os }}
      CONFIG: ${{ matrix.config.config }}
      SEATBELTS: ${{ matrix.config.SEATBELTS }}
      PYTHON: ${{ matrix.python}}
      VISUALISATION: ${{ matrix.VISUALISATION }}

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      if: ${{ startswith(env.OS, 'ubuntu') && env.CUDA != '' }}
      env:
        cuda: ${{ env.CUDA }}
      run: .github/scripts/install_cuda_ubuntu.sh

    - name: Install/Select gcc and g++
      if: ${{ startsWith(env.HOSTCXX, 'gcc-') }}
      run: |
        gcc_version=${HOSTCXX//gcc-/}
        sudo apt-get install -y gcc-${{ gcc_version }} g++-${{ gcc_version }}
        echo "CC=/usr/bin/gcc-${{ gcc_version }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ gcc_version }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ gcc_version }}" >> $GITHUB_ENV

    - name: Select Python
      if: ${{ env.PYTHON != '' && env.BUILD_SWIG_PYTHON == 'ON' }} 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON }}

    # @todo - is some/all of this still required when using select Python?
    - name: Install python dependencies
      if: ${{ env.PYTHON != '' && env.BUILD_SWIG_PYTHON == 'ON' }}
      run: |
        sudo apt-get install python3-venv
        python3 -m pip install --upgrade wheel
        python3 -m pip install --upgrade 'setuptools; python_version >= "3.6"' 'setuptools<51.3.0; python_version < "3.6" and python_version >= "3.0"'

    - name: Install Visualisation Dependencies
      if: ${{ startswith(env.OS, 'ubuntu') && env.VISUALISATION == 'ON' }}
      run: |
        echo "@todo - install vis deps depending on 18.04 or 20.04"

    - name: Configure cmake
      run: >
        cmake . -B "${{ env.BUILD_DIR }}"
        -DCMAKE_BUILD_TYPE=${{ env.CONFIG }}
        -DCMAKE_WARN_DEPRECATED=OFF 
        -DCUDA_ARCH="${{ env.CUDA_ARCH }} "
        -DBUILD_TESTS="${{ env.BUILD_TESTS }} "
        -DBUILD_SWIG_PYTHON="${{ env.BUILD_SWIG_PYTHON }}"
        -DPYTHON3_EXACT_VERSION=${{ env.PYTHON }}
        -DVISUALISATION="${{ env.VISUALISATION }}"

    - name: Build static library
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target cdga --verbose -j `nproc`

    - name: Build python wheel
      if: ${{ env.BUILD_SWIG_PYTHON == 'ON' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target pycdga --verbose -j `nproc`

    - name: Build tests
      if: ${{ env.BUILD_TESTS == 'ON' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target tests --verbose -j `nproc`

    - name: Build all remaining targets
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --target all --verbose -j `nproc`
