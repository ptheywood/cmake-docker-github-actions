# Dumb ci job to experiment with more consise matrices, than fully explicit include only.
name: matrix-testing

# Run on branch push events (i.e. not tag pushes) and on pull requests
on:
  push:
    branches:
      - '**'
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/matrix-testing.yml"
  pull_request:

defaults:
  run:
    # Default to using bash regardless of OS unless otherwise specified.
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.cudacxx.os }}
    # container:
    #   image: quay.io/pypa/manylinux2014_x86_64
    strategy:
      fail-fast: false
      # Multiplicative build matrix
      # optional exlclude: can be partial, include: must be specific
      matrix:
        cudacxx:
          - cuda: "11.4"
            cuda_arch: "35"
            hostcxx: gcc-9
            os: ubuntu-20.04
          - cuda: "11.0"
            cuda_arch: "35"
            hostcxx: gcc-9
            os: ubuntu-20.04
        python: 
          # - "3.9"
          - "3.8"
          # - "3.7"
          # - "3.6"
        config:
          - name: "Release"
            config: "Release"
            SEATBELTS: "ON"
          # - name: "SEATBELTS=OFF"
          #   config: "Release"
          #   SEATBELTS: "OFF"
          # - name: "Debug"
          #   config: "Debug"
          #   SEATBELTS: "OFF"
        VISUALISATION: 
          - "ON"
          # - "OFF"

    # Name the build based on matrix/env options
    name: build (${{ matrix.cudacxx.cuda }}, ${{matrix.python}}, ${{ matrix.VISUALISATION }}, ${{ matrix.config.name }}, ${{ matrix.cudacxx.os }})"

    # Explicitly define env bits, AND promote matrix components to the env, for more portable steps between jobs.
    env:
      # Define constants
      BUILD_DIR: "build"
      BUILD_TESTS: "OFF"
      # Conditional based on matrix via awkward almost ternary
      BUILD_SWIG_PYTHON: ${{ fromJSON('{true:"ON",false:"OFF"}')[matrix.python != ''] }}
      # Port matrix options to environment, for more portability.
      CUDA: ${{ matrix.cudacxx.cuda }}
      CUDA_ARCH: ${{ matrix.cudacxx.cuda_arch }}
      HOSTCXX: ${{ matrix.cudacxx.hostcxx }}
      OS: ${{ matrix.cudacxx.os }}
      CONFIG: ${{ matrix.config.config }}
      SEATBELTS: ${{ matrix.config.SEATBELTS }}
      PYTHON: ${{ matrix.python}}
      VISUALISATION: ${{ matrix.VISUALISATION }}
      # Compute the wheelhouse name which should be unique within the matrix.
      ARTIFACT_NAME: wheelhouse-${{ matrix.cudacxx.cuda }}-${{matrix.python}}-${{ matrix.VISUALISATION }}-${{ matrix.config.name }}-${{ matrix.cudacxx.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Output env.
      shell: bash
      run: |
        echo "${{ toJSON(env) }}"

    - name: build mock wheel
      run: |
        mkdir -p ${{ env.BUILD_DIR }}/lib/${{ env.CONFIG }}/python/dist/
        echo "${{ env.ARTIFACT_NAME }}" > ${{ env.BUILD_DIR }}/lib/${{ env.CONFIG }}/python/dist/${{ env.ARTIFACT_NAME }}.whl
        ls ${{ env.BUILD_DIR }}/lib/${{ env.CONFIG }}/python/dist/

    # Upload wheel artifacts to the job on GHA, for a very short duration. This might not be desirable in practice.
    # Use a unique name per job matrix run, to avoid a risk of corruption according to the docs (even though it works on simple examples.)
    - name: Upload Wheel Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.BUILD_DIR }}/lib/${{ env.CONFIG }}/python/dist/*.whl
        if-no-files-found: error
        retention-days: 7


  # Create a draft release, if all other jobs are successful and if the workflow was triggered by a version tag push event.
  download:
    needs: 
      - build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    # Download all artifacts from dependent jobs, by not specifying a name
    - name: Download Wheel Artifacts
      id: download
      uses: actions/download-artifact@v2
      with:
        path: wheelhouse

    - name: 'Echo download path'
      run: echo ${{steps.download.outputs.download-path}}

    - name: find files
      run: find ${{steps.download.outputs.download-path}} -type f

    - name: tree files
      run: tree ${{steps.download.outputs.download-path}}

    - name: Find Wheels
      id: find_wheels
      run: |
        # Output the tree of downloaded files for debugging 
        tree ${{ steps.download.outputs.download-path }}
        # Find files, storing in a variable
        pattern="${{ steps.download.outputs.download-path }}/*/*.whl"
        files=""
        for f in ${pattern}; do
          # @todo - set display label if desired
          label="$(basename ${f}).label"
          files="${files} \"${f}#${label}\""
        done
        echo "files: ${files}"
        echo "files: ${files}"
        # Set the list of files as the output for this step
        echo "::set-output name=files::${files}"

    - name: Test find_wheels output
      run: |
        echo "files:"
        echo "${{ steps.find_wheels.outputs.files }}" 
        echo "/files"